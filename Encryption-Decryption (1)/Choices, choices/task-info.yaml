type: edu
custom_name: stage6
files:
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |-
    package encryptdecrypt;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.io.FileWriter;
    import java.io.IOException;
    import java.util.*;

    import static java.lang.String.format;

    public class Main {
        private static int dataCounter = 0;

        public static void main(String[] args) throws IOException {
           String mode = "enc";
            int key = 0;
            String data = "";
            String fileInPath = null;
            String fileOutPath = null;

            for (int i = 0; i < args.length; i = i + 2) {
                if (args[i].equals("-mode")) {
                    mode = args[i + 1];
                } else if (args[i].equals("-key")) {
                    key = Integer.valueOf(args[i + 1]);
                } else if (args[i].equals("-data")) {
                    data = args[i + 1];
                    dataCounter++;
                } else if (args[i].equals("-out")) {
                    fileOutPath = args[i+1];
                } else if (args[i].equals("-in")||dataCounter==0){
                    fileInPath = args[i+1];
                    System.out.println(format("FILEinPATH:%s", args[i+1]));
                }
            }


            switch (mode){
                case "enc" :
                    saveEncryptedDecryptedText(fileOutPath, encryptText(getStringToManipulate(data, fileInPath), key));
                    break;
                case "dec" :
                    saveEncryptedDecryptedText(fileOutPath, decryptText(getStringToManipulate(data, fileInPath), key));
                    break;
            }
        }

        private static void saveEncryptedDecryptedText(String fileOutPath, String ecnDecText) throws IOException {
            if (fileOutPath != null) {
                File file = new File(fileOutPath);

                try (FileWriter writer = new FileWriter(file, false)) {
                    writer.write(ecnDecText);
                } catch (FileNotFoundException e) {
                    System.out.println(format("An error occurred: %s", e.getMessage()));
                    // e.printStackTrace();
                }
            } else {
                System.out.println(ecnDecText);
            }
        }

        private static String getStringToManipulate(String data, String fileInPath){
            String stringData = "";
            if(dataCounter > 0) {
                return data;
            } else if (fileInPath != null) {
                try {
                    File file = new File(fileInPath);
                    Scanner newFile = new Scanner(file);
                    while (newFile.hasNextLine()) {
                        stringData = newFile.nextLine();
                       // System.out.println(data);
                    }
                    newFile.close();
                } catch (FileNotFoundException e) {
                    System.out.println(format("An error occurred: %s", e.getMessage()));
                   // e.printStackTrace();
                }
            }
            return stringData;
        }

        public static String encryptText(String text, int key) {
            String encryptedText = "";
            for(int i = 0; i < text.length(); i++)  {
                encryptedText = encryptedText + (char)(Integer.valueOf(text.charAt(i)) + key);
            }
            return encryptedText;
        }

        public static String decryptText(String text, int key) {
            String encryptedText = "";
            for(int i = 0; i < text.length(); i++)  {
                encryptedText = encryptedText + (char)(Integer.valueOf(text.charAt(i)) - key);
            }
            return encryptedText;
        }
    }
  learner_created: false
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: false
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/46/stages/250/implement#comment
status: Solved
record: 5
